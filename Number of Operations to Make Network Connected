class Solution:
    def makeConnected(self, n: int, connections: List[List[int]]) -> int:
        def dfs(node):
            visited.add(node)
            for neighbor in graph[node]:
                if neighbor not in visited:
                    dfs(neighbor)
        
        if len(connections) < n - 1:
            return -1
        
        graph = defaultdict(list)
        for u, v in connections:
            graph[u].append(v)
            graph[v].append(u)
        
        visited = set()
        components = 0
        for node in range(n):
            if node not in visited:
                dfs(node)
                components += 1
        
        cables_required = components - 1
        return cables_required
