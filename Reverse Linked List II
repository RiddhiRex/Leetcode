# Definition for singly-linked list.
# Reverse a linked list from position m to n. Do it in one-pass.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseBetween(self, head, m, n):
        """
        :type head: ListNode
        :type m: int
        :type n: int
        :rtype: ListNode
        """
        if(head is None):
            return
        elif(head.next is None):
            return head
        if(m==n):
            return head
        dummy = ListNode(0)
        dummy.next = head
        curr=dummy
        for i in range(m-1):
            curr=curr.next
        end=curr
        prev=curr
        start=curr.next
        curr=curr.next
        print(prev.val, curr.val)
        for i in range(n-m+1):
            t=curr.next
            curr.next=prev
            prev=curr
            curr=t
        start.next=curr
        end.next = prev
        return dummy.next
            
        
